/** Declaration file generated by dts-gen */

declare module "workshopper-adventure" {
	export = workshopper_adventure;

	interface WAConfig {
		name: string;
		appDir: string;
		exerciseDir?: string;
		languages?: string[];
		defaultLanguage?: string;
		defaultOutputType?: string;
		version?: string;
		menu?: {
			width: number;
			x: number;
			y: number;
		};
		requireSubmission?: boolean;
		menuFactory?: any;
		commands?: string[];
		modifiers?: string[];
	}

	declare class workshopper_adventure {
		constructor(options: WAConfig);

		add(nameOrObject: any, fnOrObject: any, fn: any): any;

		addAll(list: any): any;

		addExercise(meta: any): any;

		countRemaining(): any;

		createExerciseContext(exercise: any): any;

		createMarkdownStream(exercise: any): any;

		execute(args: any): any;

		executeExercise(
			exercise: any,
			mode: any,
			method: any,
			args: any,
			stream: any,
			contentOnly: any,
			cb: any,
		): any;

		exerciseFail(mode: any, exercise: any, stream: any, cb: any): void;

		exercisePass(mode: any, exercise: any, stream: any, cb: any): any;

		getExerciseFiles(exercise: any, callback: any): any;

		getExerciseText(
			specifier: any,
			contentOnly: any,
			callback: any,
			...args: any[]
		): any;

		getNext(): any;

		getVersionString(): any;

		loadExercise(specifier: any): any;

		markCompleted(exerciseName: any, cb: any): any;

		onComplete(cb: any): void;

		process(
			mode: any,
			args: any,
			specifier: any,
			contentOnly: any,
			cb: any,
		): any;

		processResult(result: any, stream: any): any;

		run(args: any, specifier: any, cb: any): any;

		selectExercise(specifier: any): any;

		specifierToId(specifier: any): any;

		verify(args: any, specifier: any, contentOnly: any, cb: any): any;
	}

	declare namespace workshopper_adventure {
		namespace prototype {
			const domain: any;

			function add(nameOrObject: any, fnOrObject: any, fn: any): any;

			function addAll(list: any): any;

			function addExercise(meta: any): any;

			function addListener(type: any, listener: any): any;

			function countRemaining(): any;

			function createExerciseContext(exercise: any): any;

			function createMarkdownStream(exercise: any): any;

			function emit(type: any, ...args: any[]): any;

			function eventNames(): any;

			function execute(args: any): any;

			function executeExercise(
				exercise: any,
				mode: any,
				method: any,
				args: any,
				stream: any,
				contentOnly: any,
				cb: any,
			): any;

			function exerciseFail(
				mode: any,
				exercise: any,
				stream: any,
				cb: any,
			): void;

			function exercisePass(
				mode: any,
				exercise: any,
				stream: any,
				cb: any,
			): any;

			function getExerciseFiles(exercise: any, callback: any): any;

			function getExerciseText(
				specifier: any,
				contentOnly: any,
				callback: any,
				...args: any[]
			): any;

			function getMaxListeners(): any;

			function getNext(): any;

			function getVersionString(): any;

			function listenerCount(type: any): any;

			function listeners(type: any): any;

			function loadExercise(specifier: any): any;

			function markCompleted(exerciseName: any, cb: any): any;

			function on(type: any, listener: any): any;

			function onComplete(cb: any): void;

			function once(type: any, listener: any): any;

			function prependListener(type: any, listener: any): any;

			function prependOnceListener(type: any, listener: any): any;

			function process(
				mode: any,
				args: any,
				specifier: any,
				contentOnly: any,
				cb: any,
			): any;

			function processResult(result: any, stream: any): any;

			function removeAllListeners(type: any, ...args: any[]): any;

			function removeListener(type: any, listener: any): any;

			function run(args: any, specifier: any, cb: any): any;

			function selectExercise(specifier: any): any;

			function setMaxListeners(n: any): any;

			function specifierToId(specifier: any): any;

			function verify(
				args: any,
				specifier: any,
				contentOnly: any,
				cb: any,
			): any;

			namespace add {
				const prototype: {};
			}

			namespace addAll {
				const prototype: {};
			}

			namespace addExercise {
				const prototype: {};
			}

			namespace addListener {
				const prototype: {};
			}

			namespace countRemaining {
				const prototype: {};
			}

			namespace createExerciseContext {
				const prototype: {};
			}

			namespace createMarkdownStream {
				const prototype: {};
			}

			namespace emit {
				const prototype: {};
			}

			namespace eventNames {
				const prototype: {};
			}

			namespace execute {
				const prototype: {};
			}

			namespace executeExercise {
				const prototype: {};
			}

			namespace exerciseFail {
				const prototype: {};
			}

			namespace exercisePass {
				const prototype: {};
			}

			namespace getExerciseFiles {
				const prototype: {};
			}

			namespace getExerciseText {
				const prototype: {};
			}

			namespace getMaxListeners {
				const prototype: {};
			}

			namespace getNext {
				const prototype: {};
			}

			namespace getVersionString {
				const prototype: {};
			}

			namespace listenerCount {
				const prototype: {};
			}

			namespace listeners {
				const prototype: {};
			}

			namespace loadExercise {
				const prototype: {};
			}

			namespace markCompleted {
				const prototype: {};
			}

			namespace on {
				const prototype: {};
			}

			namespace onComplete {
				const prototype: {};
			}

			namespace once {
				const prototype: {};
			}

			namespace prependListener {
				const prototype: {};
			}

			namespace prependOnceListener {
				const prototype: {};
			}

			namespace process {
				const prototype: {};
			}

			namespace processResult {
				const prototype: {};
			}

			namespace removeAllListeners {
				const prototype: {};
			}

			namespace removeListener {
				const prototype: {};
			}

			namespace run {
				const prototype: {};
			}

			namespace selectExercise {
				const prototype: {};
			}

			namespace setMaxListeners {
				const prototype: {};
			}

			namespace specifierToId {
				const prototype: {};
			}

			namespace verify {
				const prototype: {};
			}
		}
	}
}
