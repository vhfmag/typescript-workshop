/** Declaration file generated by dts-gen */

type WorkshopperExerciseModifier = (
	exercise: WorkshopperExercise,
) => WorkshopperExercise;

declare module "workshopper-exercise/filecheck" {
	const whatever: WorkshopperExerciseModifier;
	export = whatever;
}

declare module "workshopper-exercise/execute" {
	const whatever: WorkshopperExerciseModifier;
	export = whatever;
}

declare module "workshopper-exercise/comparestdout" {
	const whatever: WorkshopperExerciseModifier;
	export = whatever;
}

declare class WorkshopperExercise {
	constructor();

	longCompareOutput: boolean;

	addCleanup(fn: (this: WorkshopperExercise) => void): any;

	addPrepare(fn: (this: WorkshopperExercise) => void): any;

	addProcessor(fn: (this: WorkshopperExercise) => void): any;

	addRunCleanup(fn: (this: WorkshopperExercise) => void): any;

	addRunPrepare(fn: (this: WorkshopperExercise) => void): any;

	addRunProcessor(fn: (this: WorkshopperExercise) => void): any;

	addRunSetup(fn: (this: WorkshopperExercise) => void): any;

	addSetup(fn: (this: WorkshopperExercise) => void): any;

	addVerifyCleanup(fn: (this: WorkshopperExercise) => void): any;

	addVerifyPrepare(fn: (this: WorkshopperExercise) => void): any;

	addVerifyProcessor(fn: (this: WorkshopperExercise) => void): any;

	addVerifySetup(fn: (this: WorkshopperExercise) => void): any;

	end(mode: any, pass: any, callback: any): any;

	getExerciseText(callback: any): any;

	getProblemFile(callback: any): any;

	getSolutionFiles(callback: any): void;

	init(
		this: WorkshopperExercise,
		workshopper: any,
		id: any,
		name: any,
		dir: any,
		number: any,
	): any;

	prepare(callback: any): any;

	process(mode: any, callback: any): any;

	run(args: any, callback: any): void;

	setup(mode: any, callback: any): any;

	use(plugin: any, ...args: any[]): any;

	verify(args: any, callback: any): void;
}

declare namespace WorkshopperExercise {
	namespace prototype {
		const domain: any;

		function addCleanup(fn: (this: WorkshopperExercise) => void): any;

		function addListener(type: any, listener: any): any;

		function addPrepare(fn: (this: WorkshopperExercise) => void): any;

		function addProcessor(fn: (this: WorkshopperExercise) => void): any;

		function addRunCleanup(fn: (this: WorkshopperExercise) => void): any;

		function addRunPrepare(fn: (this: WorkshopperExercise) => void): any;

		function addRunProcessor(fn: (this: WorkshopperExercise) => void): any;

		function addRunSetup(fn: (this: WorkshopperExercise) => void): any;

		function addSetup(fn: (this: WorkshopperExercise) => void): any;

		function addVerifyCleanup(fn: (this: WorkshopperExercise) => void): any;

		function addVerifyPrepare(fn: (this: WorkshopperExercise) => void): any;

		function addVerifyProcessor(
			fn: (this: WorkshopperExercise) => void,
		): any;

		function addVerifySetup(fn: (this: WorkshopperExercise) => void): any;

		function emit(type: any, ...args: any[]): any;

		function end(mode: any, pass: any, callback: any): any;

		function eventNames(): any;

		function getExerciseText(callback: any): any;

		function getMaxListeners(): any;

		function getProblemFile(callback: any): any;

		function getSolutionFiles(callback: any): void;

		function init(
			workshopper: any,
			id: any,
			name: any,
			dir: any,
			number: any,
		): any;

		function listenerCount(type: any): any;

		function listeners(type: any): any;

		function on(type: any, listener: any): any;

		function once(type: any, listener: any): any;

		function prepare(callback: any): any;

		function prependListener(type: any, listener: any): any;

		function prependOnceListener(type: any, listener: any): any;

		function process(mode: any, callback: any): any;

		function removeAllListeners(type: any, ...args: any[]): any;

		function removeListener(type: any, listener: any): any;

		function run(args: any, callback: any): void;

		function setMaxListeners(n: any): any;

		function setup(mode: any, callback: any): any;

		function use(plugin: any, ...args: any[]): any;

		function verify(args: any, callback: any): void;

		namespace addCleanup {
			const prototype: {};
		}

		namespace addListener {
			const prototype: {};
		}

		namespace addPrepare {
			const prototype: {};
		}

		namespace addProcessor {
			const prototype: {};
		}

		namespace addRunCleanup {
			const prototype: {};
		}

		namespace addRunPrepare {
			const prototype: {};
		}

		namespace addRunProcessor {
			const prototype: {};
		}

		namespace addRunSetup {
			const prototype: {};
		}

		namespace addSetup {
			const prototype: {};
		}

		namespace addVerifyCleanup {
			const prototype: {};
		}

		namespace addVerifyPrepare {
			const prototype: {};
		}

		namespace addVerifyProcessor {
			const prototype: {};
		}

		namespace addVerifySetup {
			const prototype: {};
		}

		namespace emit {
			const prototype: {};
		}

		namespace end {
			const prototype: {};
		}

		namespace eventNames {
			const prototype: {};
		}

		namespace getExerciseText {
			const prototype: {};
		}

		namespace getMaxListeners {
			const prototype: {};
		}

		namespace getProblemFile {
			const prototype: {};
		}

		namespace getSolutionFiles {
			const prototype: {};
		}

		namespace init {
			const prototype: {};
		}

		namespace listenerCount {
			const prototype: {};
		}

		namespace listeners {
			const prototype: {};
		}

		namespace on {
			const prototype: {};
		}

		namespace once {
			const prototype: {};
		}

		namespace prepare {
			const prototype: {};
		}

		namespace prependListener {
			const prototype: {};
		}

		namespace prependOnceListener {
			const prototype: {};
		}

		namespace process {
			const prototype: {};
		}

		namespace removeAllListeners {
			const prototype: {};
		}

		namespace removeListener {
			const prototype: {};
		}

		namespace run {
			const prototype: {};
		}

		namespace setMaxListeners {
			const prototype: {};
		}

		namespace setup {
			const prototype: {};
		}

		namespace use {
			const prototype: {};
		}

		namespace verify {
			const prototype: {};
		}
	}
}

declare module "workshopper-exercise" {
	export = WorkshopperExercise;
}
